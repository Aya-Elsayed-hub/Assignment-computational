import numpy as np

# تفعيل الدالة (Sigmoid)
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# مشتقة دالة التفعيل Sigmoid
def sigmoid_derivative(x):
    return x * (1 - x)

# بيانات الإدخال (4 عينات - 2 ميزات لكل عينة)
X = np.array([[0, 0], 
              [0, 1], 
              [1, 0], 
              [1, 1]])

# القيم الحقيقية (ناتج XOR)
y = np.array([[0], 
              [1], 
              [1], 
              [0]])

# تهيئة الأوزان عشوائيًا
np.random.seed(1)
input_layer_neurons = 2  # عدد الخلايا في طبقة الإدخال
hidden_layer_neurons = 4 # عدد الخلايا في الطبقة المخفية
output_neurons = 1        # عدد الخلايا في طبقة الإخراج

# أوزان الطبقة المخفية
weights_input_hidden = np.random.uniform(size=(input_layer_neurons, hidden_layer_neurons))
bias_hidden = np.random.uniform(size=(1, hidden_layer_neurons))

# أوزان الطبقة الإخراجية
weights_hidden_output = np.random.uniform(size=(hidden_layer_neurons, output_neurons))
bias_output = np.random.uniform(size=(1, output_neurons))

# معدل التعلم
learning_rate = 0.5

# عدد التكرارات
epochs = 10000

# التدريب باستخدام Backpropagation
for epoch in range(epochs):
    # التمرير الأمامي (Forward Propagation)
    hidden_layer_activation = np.dot(X, weights_input_hidden) + bias_hidden
    hidden_layer_output = sigmoid(hidden_layer_activation)

    output_layer_activation = np.dot(hidden_layer_output, weights_hidden_output) + bias_output
    predicted_output = sigmoid(output_layer_activation)

    # حساب الخطأ
    error = y - predicted_output

    # التمرير العكسي (Backpropagation)
    d_predicted_output = error * sigmoid_derivative(predicted_output)

    error_hidden_layer = d_predicted_output.dot(weights_hidden_output.T)
    d_hidden_layer = error_hidden_layer * sigmoid_derivative(hidden_layer_output)

    # تحديث الأوزان و التحيزات باستخدام Gradient Descent
    weights_hidden_output += hidden_layer_output.T.dot(d_predicted_output) * learning_rate
    bias_output += np.sum(d_predicted_output, axis=0, keepdims=True) * learning_rate

    weights_input_hidden += X.T.dot(d_hidden_layer) * learning_rate
    bias_hidden += np.sum(d_hidden_layer, axis=0, keepdims=True) * learning_rate

    # طباعة الخطأ كل 1000 تكرار
    if epoch % 1000 == 0:
        print(f"Epoch {epoch}, Error: {np.mean(np.abs(error))}")

# عرض النتيجة النهائية
print("\n**Final Output After Training:**")
print(predicted_output)